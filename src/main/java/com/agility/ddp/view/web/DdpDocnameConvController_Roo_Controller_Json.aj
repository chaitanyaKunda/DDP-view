// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpAedRule;
import com.agility.ddp.data.domain.DdpDocnameConv;
import com.agility.ddp.data.domain.DdpExportRule;
import com.agility.ddp.view.web.DdpDocnameConvController;
import java.util.List;
import java.util.Set;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect DdpDocnameConvController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{dcvId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDocnameConvController.showJson(@PathVariable("dcvId") Integer dcvId) {
        DdpDocnameConv ddpDocnameConv = ddpDocnameConvService.findDdpDocnameConv(dcvId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (ddpDocnameConv == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ddpDocnameConv.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDocnameConvController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<DdpDocnameConv> result = ddpDocnameConvService.findAllDdpDocnameConvs();
        return new ResponseEntity<String>(DdpDocnameConv.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpDocnameConvController.createFromJson(@RequestBody String json) {
        DdpDocnameConv ddpDocnameConv = DdpDocnameConv.fromJsonToDdpDocnameConv(json);
        ddpDocnameConvService.saveDdpDocnameConv(ddpDocnameConv);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpDocnameConvController.createFromJsonArray(@RequestBody String json) {
        for (DdpDocnameConv ddpDocnameConv: DdpDocnameConv.fromJsonArrayToDdpDocnameConvs(json)) {
            ddpDocnameConvService.saveDdpDocnameConv(ddpDocnameConv);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{dcvId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> DdpDocnameConvController.updateFromJson(@RequestBody String json, @PathVariable("dcvId") Integer dcvId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        DdpDocnameConv ddpDocnameConv = DdpDocnameConv.fromJsonToDdpDocnameConv(json);
        if (ddpDocnameConvService.updateDdpDocnameConv(ddpDocnameConv) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{dcvId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> DdpDocnameConvController.deleteFromJson(@PathVariable("dcvId") Integer dcvId) {
        DdpDocnameConv ddpDocnameConv = ddpDocnameConvService.findDdpDocnameConv(dcvId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (ddpDocnameConv == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ddpDocnameConvService.deleteDdpDocnameConv(ddpDocnameConv);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDcvBranchCodeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDocnameConvController.jsonFindDdpDocnameConvsByDcvBranchCodeEquals(@RequestParam("dcvBranchCode") String dcvBranchCode) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDocnameConv.toJsonArray(DdpDocnameConv.findDdpDocnameConvsByDcvBranchCodeEquals(dcvBranchCode).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDcvCompanyCodeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDocnameConvController.jsonFindDdpDocnameConvsByDcvCompanyCodeEquals(@RequestParam("dcvCompanyCode") String dcvCompanyCode) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDocnameConv.toJsonArray(DdpDocnameConv.findDdpDocnameConvsByDcvCompanyCodeEquals(dcvCompanyCode).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDcvDoctypeCodeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDocnameConvController.jsonFindDdpDocnameConvsByDcvDoctypeCodeEquals(@RequestParam("dcvDoctypeCode") String dcvDoctypeCode) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDocnameConv.toJsonArray(DdpDocnameConv.findDdpDocnameConvsByDcvDoctypeCodeEquals(dcvDoctypeCode).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDcvDupDocNamingConvEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDocnameConvController.jsonFindDdpDocnameConvsByDcvDupDocNamingConvEquals(@RequestParam("dcvDupDocNamingConv") String dcvDupDocNamingConv) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDocnameConv.toJsonArray(DdpDocnameConv.findDdpDocnameConvsByDcvDupDocNamingConvEquals(dcvDupDocNamingConv).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDcvGenNamingConvEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDocnameConvController.jsonFindDdpDocnameConvsByDcvGenNamingConvEquals(@RequestParam("dcvGenNamingConv") String dcvGenNamingConv) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDocnameConv.toJsonArray(DdpDocnameConv.findDdpDocnameConvsByDcvGenNamingConvEquals(dcvGenNamingConv).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDcvSaveTypeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDocnameConvController.jsonFindDdpDocnameConvsByDcvSaveTypeEquals(@RequestParam("dcvSaveType") String dcvSaveType) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDocnameConv.toJsonArray(DdpDocnameConv.findDdpDocnameConvsByDcvSaveTypeEquals(dcvSaveType).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDcvStatusEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDocnameConvController.jsonFindDdpDocnameConvsByDcvStatusEquals(@RequestParam("dcvStatus") Integer dcvStatus) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDocnameConv.toJsonArray(DdpDocnameConv.findDdpDocnameConvsByDcvStatusEquals(dcvStatus).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDdpAedRules", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDocnameConvController.jsonFindDdpDocnameConvsByDdpAedRules(@RequestParam("ddpAedRules") Set<DdpAedRule> ddpAedRules) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDocnameConv.toJsonArray(DdpDocnameConv.findDdpDocnameConvsByDdpAedRules(ddpAedRules).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDdpExportRules", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDocnameConvController.jsonFindDdpDocnameConvsByDdpExportRules(@RequestParam("ddpExportRules") Set<DdpExportRule> ddpExportRules) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDocnameConv.toJsonArray(DdpDocnameConv.findDdpDocnameConvsByDdpExportRules(ddpExportRules).getResultList()), headers, HttpStatus.OK);
    }
    
}
