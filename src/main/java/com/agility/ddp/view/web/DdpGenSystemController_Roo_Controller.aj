// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpGenSystem;
import com.agility.ddp.data.domain.DdpGenSystemService;
import com.agility.ddp.data.domain.DdpRuleDetailService;
import com.agility.ddp.view.web.DdpGenSystemController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect DdpGenSystemController_Roo_Controller {
    
    @Autowired
    DdpGenSystemService DdpGenSystemController.ddpGenSystemService;
    
    @Autowired
    DdpRuleDetailService DdpGenSystemController.ddpRuleDetailService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String DdpGenSystemController.create(@Valid DdpGenSystem ddpGenSystem, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpGenSystem);
            return "ddpgensystems/create";
        }
        uiModel.asMap().clear();
        ddpGenSystemService.saveDdpGenSystem(ddpGenSystem);
        return "redirect:/ddpgensystems/" + encodeUrlPathSegment(ddpGenSystem.getGenApplicationCode().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String DdpGenSystemController.createForm(Model uiModel) {
        populateEditForm(uiModel, new DdpGenSystem());
        return "ddpgensystems/create";
    }
    
    @RequestMapping(value = "/{genApplicationCode}", produces = "text/html")
    public String DdpGenSystemController.show(@PathVariable("genApplicationCode") String genApplicationCode, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpgensystem", ddpGenSystemService.findDdpGenSystem(genApplicationCode));
        uiModel.addAttribute("itemId", genApplicationCode);
        return "ddpgensystems/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String DdpGenSystemController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddpgensystems", ddpGenSystemService.findDdpGenSystemEntries(firstResult, sizeNo));
            float nrOfPages = (float) ddpGenSystemService.countAllDdpGenSystems() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddpgensystems", ddpGenSystemService.findAllDdpGenSystems());
        }
        addDateTimeFormatPatterns(uiModel);
        return "ddpgensystems/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String DdpGenSystemController.update(@Valid DdpGenSystem ddpGenSystem, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpGenSystem);
            return "ddpgensystems/update";
        }
        uiModel.asMap().clear();
        ddpGenSystemService.updateDdpGenSystem(ddpGenSystem);
        return "redirect:/ddpgensystems/" + encodeUrlPathSegment(ddpGenSystem.getGenApplicationCode().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{genApplicationCode}", params = "form", produces = "text/html")
    public String DdpGenSystemController.updateForm(@PathVariable("genApplicationCode") String genApplicationCode, Model uiModel) {
        populateEditForm(uiModel, ddpGenSystemService.findDdpGenSystem(genApplicationCode));
        return "ddpgensystems/update";
    }
    
    @RequestMapping(value = "/{genApplicationCode}", method = RequestMethod.DELETE, produces = "text/html")
    public String DdpGenSystemController.delete(@PathVariable("genApplicationCode") String genApplicationCode, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        DdpGenSystem ddpGenSystem = ddpGenSystemService.findDdpGenSystem(genApplicationCode);
        ddpGenSystemService.deleteDdpGenSystem(ddpGenSystem);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ddpgensystems";
    }
    
    void DdpGenSystemController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ddpGenSystem_gencreateddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ddpGenSystem_genmodifieddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void DdpGenSystemController.populateEditForm(Model uiModel, DdpGenSystem ddpGenSystem) {
        uiModel.addAttribute("ddpGenSystem", ddpGenSystem);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpruledetails", ddpRuleDetailService.findAllDdpRuleDetails());
    }
    
    String DdpGenSystemController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
