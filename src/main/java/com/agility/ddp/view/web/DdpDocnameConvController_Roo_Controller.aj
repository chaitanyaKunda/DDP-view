// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpAedRuleService;
import com.agility.ddp.data.domain.DdpDocnameConv;
import com.agility.ddp.data.domain.DdpDocnameConvService;
import com.agility.ddp.data.domain.DdpExportRuleService;
import com.agility.ddp.view.web.DdpDocnameConvController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect DdpDocnameConvController_Roo_Controller {
    
    @Autowired
    DdpDocnameConvService DdpDocnameConvController.ddpDocnameConvService;
    
    @Autowired
    DdpAedRuleService DdpDocnameConvController.ddpAedRuleService;
    
    @Autowired
    DdpExportRuleService DdpDocnameConvController.ddpExportRuleService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String DdpDocnameConvController.create(@Valid DdpDocnameConv ddpDocnameConv, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpDocnameConv);
            return "ddpdocnameconvs/create";
        }
        uiModel.asMap().clear();
        ddpDocnameConvService.saveDdpDocnameConv(ddpDocnameConv);
        return "redirect:/ddpdocnameconvs/" + encodeUrlPathSegment(ddpDocnameConv.getDcvId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String DdpDocnameConvController.createForm(Model uiModel) {
        populateEditForm(uiModel, new DdpDocnameConv());
        return "ddpdocnameconvs/create";
    }
    
    @RequestMapping(value = "/{dcvId}", produces = "text/html")
    public String DdpDocnameConvController.show(@PathVariable("dcvId") Integer dcvId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpdocnameconv", ddpDocnameConvService.findDdpDocnameConv(dcvId));
        uiModel.addAttribute("itemId", dcvId);
        return "ddpdocnameconvs/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String DdpDocnameConvController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddpdocnameconvs", ddpDocnameConvService.findDdpDocnameConvEntries(firstResult, sizeNo));
            float nrOfPages = (float) ddpDocnameConvService.countAllDdpDocnameConvs() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddpdocnameconvs", ddpDocnameConvService.findAllDdpDocnameConvs());
        }
        addDateTimeFormatPatterns(uiModel);
        return "ddpdocnameconvs/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String DdpDocnameConvController.update(@Valid DdpDocnameConv ddpDocnameConv, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpDocnameConv);
            return "ddpdocnameconvs/update";
        }
        uiModel.asMap().clear();
        ddpDocnameConvService.updateDdpDocnameConv(ddpDocnameConv);
        return "redirect:/ddpdocnameconvs/" + encodeUrlPathSegment(ddpDocnameConv.getDcvId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{dcvId}", params = "form", produces = "text/html")
    public String DdpDocnameConvController.updateForm(@PathVariable("dcvId") Integer dcvId, Model uiModel) {
        populateEditForm(uiModel, ddpDocnameConvService.findDdpDocnameConv(dcvId));
        return "ddpdocnameconvs/update";
    }
    
    @RequestMapping(value = "/{dcvId}", method = RequestMethod.DELETE, produces = "text/html")
    public String DdpDocnameConvController.delete(@PathVariable("dcvId") Integer dcvId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        DdpDocnameConv ddpDocnameConv = ddpDocnameConvService.findDdpDocnameConv(dcvId);
        ddpDocnameConvService.deleteDdpDocnameConv(ddpDocnameConv);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ddpdocnameconvs";
    }
    
    void DdpDocnameConvController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ddpDocnameConv_dcvcreateddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ddpDocnameConv_dcvmodifieddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void DdpDocnameConvController.populateEditForm(Model uiModel, DdpDocnameConv ddpDocnameConv) {
        uiModel.addAttribute("ddpDocnameConv", ddpDocnameConv);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpaedrules", ddpAedRuleService.findAllDdpAedRules());
        uiModel.addAttribute("ddpexportrules", ddpExportRuleService.findAllDdpExportRules());
    }
    
    String DdpDocnameConvController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
