// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpAedRuleService;
import com.agility.ddp.data.domain.DdpExportRuleService;
import com.agility.ddp.data.domain.DdpNotification;
import com.agility.ddp.data.domain.DdpNotificationService;
import com.agility.ddp.data.domain.DdpRuleDetailService;
import com.agility.ddp.view.web.DdpNotificationController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect DdpNotificationController_Roo_Controller {
    
    @Autowired
    DdpNotificationService DdpNotificationController.ddpNotificationService;
    
    @Autowired
    DdpAedRuleService DdpNotificationController.ddpAedRuleService;
    
    @Autowired
    DdpExportRuleService DdpNotificationController.ddpExportRuleService;
    
    @Autowired
    DdpRuleDetailService DdpNotificationController.ddpRuleDetailService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String DdpNotificationController.create(@Valid DdpNotification ddpNotification, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpNotification);
            return "ddpnotifications/create";
        }
        uiModel.asMap().clear();
        ddpNotificationService.saveDdpNotification(ddpNotification);
        return "redirect:/ddpnotifications/" + encodeUrlPathSegment(ddpNotification.getNotId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String DdpNotificationController.createForm(Model uiModel) {
        populateEditForm(uiModel, new DdpNotification());
        return "ddpnotifications/create";
    }
    
    @RequestMapping(value = "/{notId}", produces = "text/html")
    public String DdpNotificationController.show(@PathVariable("notId") Integer notId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpnotification", ddpNotificationService.findDdpNotification(notId));
        uiModel.addAttribute("itemId", notId);
        return "ddpnotifications/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String DdpNotificationController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddpnotifications", ddpNotificationService.findDdpNotificationEntries(firstResult, sizeNo));
            float nrOfPages = (float) ddpNotificationService.countAllDdpNotifications() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddpnotifications", ddpNotificationService.findAllDdpNotifications());
        }
        addDateTimeFormatPatterns(uiModel);
        return "ddpnotifications/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String DdpNotificationController.update(@Valid DdpNotification ddpNotification, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpNotification);
            return "ddpnotifications/update";
        }
        uiModel.asMap().clear();
        ddpNotificationService.updateDdpNotification(ddpNotification);
        return "redirect:/ddpnotifications/" + encodeUrlPathSegment(ddpNotification.getNotId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{notId}", params = "form", produces = "text/html")
    public String DdpNotificationController.updateForm(@PathVariable("notId") Integer notId, Model uiModel) {
        populateEditForm(uiModel, ddpNotificationService.findDdpNotification(notId));
        return "ddpnotifications/update";
    }
    
    @RequestMapping(value = "/{notId}", method = RequestMethod.DELETE, produces = "text/html")
    public String DdpNotificationController.delete(@PathVariable("notId") Integer notId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        DdpNotification ddpNotification = ddpNotificationService.findDdpNotification(notId);
        ddpNotificationService.deleteDdpNotification(ddpNotification);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ddpnotifications";
    }
    
    void DdpNotificationController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ddpNotification_notcreateddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ddpNotification_notmodifieddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void DdpNotificationController.populateEditForm(Model uiModel, DdpNotification ddpNotification) {
        uiModel.addAttribute("ddpNotification", ddpNotification);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpaedrules", ddpAedRuleService.findAllDdpAedRules());
        uiModel.addAttribute("ddpexportrules", ddpExportRuleService.findAllDdpExportRules());
        uiModel.addAttribute("ddpruledetails", ddpRuleDetailService.findAllDdpRuleDetails());
    }
    
    String DdpNotificationController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
