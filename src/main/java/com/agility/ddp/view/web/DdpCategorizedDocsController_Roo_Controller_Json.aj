// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpCategorizedAuditTxn;
import com.agility.ddp.data.domain.DdpCategorizedDocs;
import com.agility.ddp.data.domain.DdpDmsDocsTxn;
import com.agility.ddp.data.domain.DdpRule;
import com.agility.ddp.view.web.DdpCategorizedDocsController;
import java.util.List;
import java.util.Set;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect DdpCategorizedDocsController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{catId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpCategorizedDocsController.showJson(@PathVariable("catId") Integer catId) {
        DdpCategorizedDocs ddpCategorizedDocs = ddpCategorizedDocsService.findDdpCategorizedDocs(catId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (ddpCategorizedDocs == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ddpCategorizedDocs.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpCategorizedDocsController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<DdpCategorizedDocs> result = ddpCategorizedDocsService.findAllDdpCategorizedDocses();
        return new ResponseEntity<String>(DdpCategorizedDocs.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpCategorizedDocsController.createFromJson(@RequestBody String json) {
        DdpCategorizedDocs ddpCategorizedDocs = DdpCategorizedDocs.fromJsonToDdpCategorizedDocs(json);
        ddpCategorizedDocsService.saveDdpCategorizedDocs(ddpCategorizedDocs);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpCategorizedDocsController.createFromJsonArray(@RequestBody String json) {
        for (DdpCategorizedDocs ddpCategorizedDocs: DdpCategorizedDocs.fromJsonArrayToDdpCategorizedDocses(json)) {
            ddpCategorizedDocsService.saveDdpCategorizedDocs(ddpCategorizedDocs);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{catId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> DdpCategorizedDocsController.updateFromJson(@RequestBody String json, @PathVariable("catId") Integer catId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        DdpCategorizedDocs ddpCategorizedDocs = DdpCategorizedDocs.fromJsonToDdpCategorizedDocs(json);
        if (ddpCategorizedDocsService.updateDdpCategorizedDocs(ddpCategorizedDocs) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{catId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> DdpCategorizedDocsController.deleteFromJson(@PathVariable("catId") Integer catId) {
        DdpCategorizedDocs ddpCategorizedDocs = ddpCategorizedDocsService.findDdpCategorizedDocs(catId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (ddpCategorizedDocs == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ddpCategorizedDocsService.deleteDdpCategorizedDocs(ddpCategorizedDocs);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCatCurrentPmEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpCategorizedDocsController.jsonFindDdpCategorizedDocsesByCatCurrentPmEquals(@RequestParam("catCurrentPm") String catCurrentPm) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpCategorizedDocs.toJsonArray(DdpCategorizedDocs.findDdpCategorizedDocsesByCatCurrentPmEquals(catCurrentPm).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCatCurrentPmFailedCountEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpCategorizedDocsController.jsonFindDdpCategorizedDocsesByCatCurrentPmFailedCountEquals(@RequestParam("catCurrentPmFailedCount") Integer catCurrentPmFailedCount) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpCategorizedDocs.toJsonArray(DdpCategorizedDocs.findDdpCategorizedDocsesByCatCurrentPmFailedCountEquals(catCurrentPmFailedCount).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCatCurrentPmSeqEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpCategorizedDocsController.jsonFindDdpCategorizedDocsesByCatCurrentPmSeqEquals(@RequestParam("catCurrentPmSeq") Integer catCurrentPmSeq) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpCategorizedDocs.toJsonArray(DdpCategorizedDocs.findDdpCategorizedDocsesByCatCurrentPmSeqEquals(catCurrentPmSeq).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCatDtxId", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpCategorizedDocsController.jsonFindDdpCategorizedDocsesByCatDtxId(@RequestParam("catDtxId") DdpDmsDocsTxn catDtxId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpCategorizedDocs.toJsonArray(DdpCategorizedDocs.findDdpCategorizedDocsesByCatDtxId(catDtxId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCatNextPmEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpCategorizedDocsController.jsonFindDdpCategorizedDocsesByCatNextPmEquals(@RequestParam("catNextPm") String catNextPm) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpCategorizedDocs.toJsonArray(DdpCategorizedDocs.findDdpCategorizedDocsesByCatNextPmEquals(catNextPm).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCatPrevPmEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpCategorizedDocsController.jsonFindDdpCategorizedDocsesByCatPrevPmEquals(@RequestParam("catPrevPm") String catPrevPm) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpCategorizedDocs.toJsonArray(DdpCategorizedDocs.findDdpCategorizedDocsesByCatPrevPmEquals(catPrevPm).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCatRdtIdEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpCategorizedDocsController.jsonFindDdpCategorizedDocsesByCatRdtIdEquals(@RequestParam("catRdtId") Integer catRdtId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpCategorizedDocs.toJsonArray(DdpCategorizedDocs.findDdpCategorizedDocsesByCatRdtIdEquals(catRdtId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCatRulId", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpCategorizedDocsController.jsonFindDdpCategorizedDocsesByCatRulId(@RequestParam("catRulId") DdpRule catRulId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpCategorizedDocs.toJsonArray(DdpCategorizedDocs.findDdpCategorizedDocsesByCatRulId(catRulId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCatRuleTypeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpCategorizedDocsController.jsonFindDdpCategorizedDocsesByCatRuleTypeEquals(@RequestParam("catRuleType") String catRuleType) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpCategorizedDocs.toJsonArray(DdpCategorizedDocs.findDdpCategorizedDocsesByCatRuleTypeEquals(catRuleType).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCatStatusEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpCategorizedDocsController.jsonFindDdpCategorizedDocsesByCatStatusEquals(@RequestParam("catStatus") Integer catStatus) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpCategorizedDocs.toJsonArray(DdpCategorizedDocs.findDdpCategorizedDocsesByCatStatusEquals(catStatus).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCatSynIdEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpCategorizedDocsController.jsonFindDdpCategorizedDocsesByCatSynIdEquals(@RequestParam("catSynId") Integer catSynId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpCategorizedDocs.toJsonArray(DdpCategorizedDocs.findDdpCategorizedDocsesByCatSynIdEquals(catSynId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCatTotalPmReqEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpCategorizedDocsController.jsonFindDdpCategorizedDocsesByCatTotalPmReqEquals(@RequestParam("catTotalPmReq") Integer catTotalPmReq) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpCategorizedDocs.toJsonArray(DdpCategorizedDocs.findDdpCategorizedDocsesByCatTotalPmReqEquals(catTotalPmReq).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDdpCategorizedAuditTxns", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpCategorizedDocsController.jsonFindDdpCategorizedDocsesByDdpCategorizedAuditTxns(@RequestParam("ddpCategorizedAuditTxns") Set<DdpCategorizedAuditTxn> ddpCategorizedAuditTxns) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpCategorizedDocs.toJsonArray(DdpCategorizedDocs.findDdpCategorizedDocsesByDdpCategorizedAuditTxns(ddpCategorizedAuditTxns).getResultList()), headers, HttpStatus.OK);
    }
    
}
