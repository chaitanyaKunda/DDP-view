// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpRateSetup;
import com.agility.ddp.data.domain.DdpRateSetupService;
import com.agility.ddp.data.domain.DdpRuleDetailService;
import com.agility.ddp.view.web.DdpRateSetupController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect DdpRateSetupController_Roo_Controller {
    
    @Autowired
    DdpRateSetupService DdpRateSetupController.ddpRateSetupService;
    
    @Autowired
    DdpRuleDetailService DdpRateSetupController.ddpRuleDetailService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String DdpRateSetupController.create(@Valid DdpRateSetup ddpRateSetup, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpRateSetup);
            return "ddpratesetups/create";
        }
        uiModel.asMap().clear();
        ddpRateSetupService.saveDdpRateSetup(ddpRateSetup);
        return "redirect:/ddpratesetups/" + encodeUrlPathSegment(ddpRateSetup.getRtsId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String DdpRateSetupController.createForm(Model uiModel) {
        populateEditForm(uiModel, new DdpRateSetup());
        return "ddpratesetups/create";
    }
    
    @RequestMapping(value = "/{rtsId}", produces = "text/html")
    public String DdpRateSetupController.show(@PathVariable("rtsId") Integer rtsId, Model uiModel) {
        uiModel.addAttribute("ddpratesetup", ddpRateSetupService.findDdpRateSetup(rtsId));
        uiModel.addAttribute("itemId", rtsId);
        return "ddpratesetups/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String DdpRateSetupController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddpratesetups", ddpRateSetupService.findDdpRateSetupEntries(firstResult, sizeNo));
            float nrOfPages = (float) ddpRateSetupService.countAllDdpRateSetups() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddpratesetups", ddpRateSetupService.findAllDdpRateSetups());
        }
        return "ddpratesetups/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String DdpRateSetupController.update(@Valid DdpRateSetup ddpRateSetup, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpRateSetup);
            return "ddpratesetups/update";
        }
        uiModel.asMap().clear();
        ddpRateSetupService.updateDdpRateSetup(ddpRateSetup);
        return "redirect:/ddpratesetups/" + encodeUrlPathSegment(ddpRateSetup.getRtsId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{rtsId}", params = "form", produces = "text/html")
    public String DdpRateSetupController.updateForm(@PathVariable("rtsId") Integer rtsId, Model uiModel) {
        populateEditForm(uiModel, ddpRateSetupService.findDdpRateSetup(rtsId));
        return "ddpratesetups/update";
    }
    
    @RequestMapping(value = "/{rtsId}", method = RequestMethod.DELETE, produces = "text/html")
    public String DdpRateSetupController.delete(@PathVariable("rtsId") Integer rtsId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        DdpRateSetup ddpRateSetup = ddpRateSetupService.findDdpRateSetup(rtsId);
        ddpRateSetupService.deleteDdpRateSetup(ddpRateSetup);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ddpratesetups";
    }
    
    void DdpRateSetupController.populateEditForm(Model uiModel, DdpRateSetup ddpRateSetup) {
        uiModel.addAttribute("ddpRateSetup", ddpRateSetup);
        uiModel.addAttribute("ddpruledetails", ddpRuleDetailService.findAllDdpRuleDetails());
    }
    
    String DdpRateSetupController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
