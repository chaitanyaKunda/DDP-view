// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpGenSourceSetup;
import com.agility.ddp.data.domain.DdpGenSourceSetupService;
import com.agility.ddp.data.domain.DdpRuleDetailService;
import com.agility.ddp.view.web.DdpGenSourceSetupController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect DdpGenSourceSetupController_Roo_Controller {
    
    @Autowired
    DdpGenSourceSetupService DdpGenSourceSetupController.ddpGenSourceSetupService;
    
    @Autowired
    DdpRuleDetailService DdpGenSourceSetupController.ddpRuleDetailService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String DdpGenSourceSetupController.create(@Valid DdpGenSourceSetup ddpGenSourceSetup, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpGenSourceSetup);
            return "ddpgensourcesetups/create";
        }
        uiModel.asMap().clear();
        ddpGenSourceSetupService.saveDdpGenSourceSetup(ddpGenSourceSetup);
        return "redirect:/ddpgensourcesetups/" + encodeUrlPathSegment(ddpGenSourceSetup.getGssId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String DdpGenSourceSetupController.createForm(Model uiModel) {
        populateEditForm(uiModel, new DdpGenSourceSetup());
        return "ddpgensourcesetups/create";
    }
    
    @RequestMapping(value = "/{gssId}", produces = "text/html")
    public String DdpGenSourceSetupController.show(@PathVariable("gssId") Integer gssId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpgensourcesetup", ddpGenSourceSetupService.findDdpGenSourceSetup(gssId));
        uiModel.addAttribute("itemId", gssId);
        return "ddpgensourcesetups/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String DdpGenSourceSetupController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddpgensourcesetups", ddpGenSourceSetupService.findDdpGenSourceSetupEntries(firstResult, sizeNo));
            float nrOfPages = (float) ddpGenSourceSetupService.countAllDdpGenSourceSetups() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddpgensourcesetups", ddpGenSourceSetupService.findAllDdpGenSourceSetups());
        }
        addDateTimeFormatPatterns(uiModel);
        return "ddpgensourcesetups/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String DdpGenSourceSetupController.update(@Valid DdpGenSourceSetup ddpGenSourceSetup, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpGenSourceSetup);
            return "ddpgensourcesetups/update";
        }
        uiModel.asMap().clear();
        ddpGenSourceSetupService.updateDdpGenSourceSetup(ddpGenSourceSetup);
        return "redirect:/ddpgensourcesetups/" + encodeUrlPathSegment(ddpGenSourceSetup.getGssId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{gssId}", params = "form", produces = "text/html")
    public String DdpGenSourceSetupController.updateForm(@PathVariable("gssId") Integer gssId, Model uiModel) {
        populateEditForm(uiModel, ddpGenSourceSetupService.findDdpGenSourceSetup(gssId));
        return "ddpgensourcesetups/update";
    }
    
    @RequestMapping(value = "/{gssId}", method = RequestMethod.DELETE, produces = "text/html")
    public String DdpGenSourceSetupController.delete(@PathVariable("gssId") Integer gssId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        DdpGenSourceSetup ddpGenSourceSetup = ddpGenSourceSetupService.findDdpGenSourceSetup(gssId);
        ddpGenSourceSetupService.deleteDdpGenSourceSetup(ddpGenSourceSetup);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ddpgensourcesetups";
    }
    
    void DdpGenSourceSetupController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ddpGenSourceSetup_gsscreateddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ddpGenSourceSetup_gssmodifieddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void DdpGenSourceSetupController.populateEditForm(Model uiModel, DdpGenSourceSetup ddpGenSourceSetup) {
        uiModel.addAttribute("ddpGenSourceSetup", ddpGenSourceSetup);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpruledetails", ddpRuleDetailService.findAllDdpRuleDetails());
    }
    
    String DdpGenSourceSetupController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
