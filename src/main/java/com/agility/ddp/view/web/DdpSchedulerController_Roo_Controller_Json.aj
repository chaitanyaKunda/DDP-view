// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpAedRule;
import com.agility.ddp.data.domain.DdpExportRule;
import com.agility.ddp.data.domain.DdpRuleDetail;
import com.agility.ddp.data.domain.DdpScheduler;
import com.agility.ddp.view.web.DdpSchedulerController;
import java.util.Calendar;
import java.util.List;
import java.util.Set;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect DdpSchedulerController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{schId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.showJson(@PathVariable("schId") Integer schId) {
        DdpScheduler ddpScheduler = ddpSchedulerService.findDdpScheduler(schId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (ddpScheduler == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ddpScheduler.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<DdpScheduler> result = ddpSchedulerService.findAllDdpSchedulers();
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpSchedulerController.createFromJson(@RequestBody String json) {
        DdpScheduler ddpScheduler = DdpScheduler.fromJsonToDdpScheduler(json);
        ddpSchedulerService.saveDdpScheduler(ddpScheduler);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpSchedulerController.createFromJsonArray(@RequestBody String json) {
        for (DdpScheduler ddpScheduler: DdpScheduler.fromJsonArrayToDdpSchedulers(json)) {
            ddpSchedulerService.saveDdpScheduler(ddpScheduler);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{schId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> DdpSchedulerController.updateFromJson(@RequestBody String json, @PathVariable("schId") Integer schId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        DdpScheduler ddpScheduler = DdpScheduler.fromJsonToDdpScheduler(json);
        if (ddpSchedulerService.updateDdpScheduler(ddpScheduler) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{schId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> DdpSchedulerController.deleteFromJson(@PathVariable("schId") Integer schId) {
        DdpScheduler ddpScheduler = ddpSchedulerService.findDdpScheduler(schId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (ddpScheduler == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ddpSchedulerService.deleteDdpScheduler(ddpScheduler);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDdpAedRules", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersByDdpAedRules(@RequestParam("ddpAedRules") Set<DdpAedRule> ddpAedRules) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersByDdpAedRules(ddpAedRules).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDdpExportRules", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersByDdpExportRules(@RequestParam("ddpExportRules") Set<DdpExportRule> ddpExportRules) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersByDdpExportRules(ddpExportRules).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDdpRuleDetails", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersByDdpRuleDetails(@RequestParam("ddpRuleDetails") Set<DdpRuleDetail> ddpRuleDetails) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersByDdpRuleDetails(ddpRuleDetails).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchCreatedDateBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchCreatedDateBetween(@RequestParam("minSchCreatedDate") @DateTimeFormat(style = "MM") Calendar minSchCreatedDate, @RequestParam("maxSchCreatedDate") @DateTimeFormat(style = "MM") Calendar maxSchCreatedDate) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchCreatedDateBetween(minSchCreatedDate, maxSchCreatedDate).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchCreatedDateEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchCreatedDateEquals(@RequestParam("schCreatedDate") @DateTimeFormat(style = "MM") Calendar schCreatedDate) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchCreatedDateEquals(schCreatedDate).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchCronExpressionsEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchCronExpressionsEquals(@RequestParam("schCronExpressions") String schCronExpressions) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchCronExpressionsEquals(schCronExpressions).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchEndDateBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchEndDateBetween(@RequestParam("minSchEndDate") @DateTimeFormat(style = "MM") Calendar minSchEndDate, @RequestParam("maxSchEndDate") @DateTimeFormat(style = "MM") Calendar maxSchEndDate) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchEndDateBetween(minSchEndDate, maxSchEndDate).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchEndDateEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchEndDateEquals(@RequestParam("schEndDate") @DateTimeFormat(style = "MM") Calendar schEndDate) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchEndDateEquals(schEndDate).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchFailedCountEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchFailedCountEquals(@RequestParam("schFailedCount") Integer schFailedCount) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchFailedCountEquals(schFailedCount).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchIsRunningEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchIsRunningEquals(@RequestParam("schIsRunning") Integer schIsRunning) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchIsRunningEquals(schIsRunning).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchLastFailedRunBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchLastFailedRunBetween(@RequestParam("minSchLastFailedRun") @DateTimeFormat(style = "MM") Calendar minSchLastFailedRun, @RequestParam("maxSchLastFailedRun") @DateTimeFormat(style = "MM") Calendar maxSchLastFailedRun) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchLastFailedRunBetween(minSchLastFailedRun, maxSchLastFailedRun).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchLastFailedRunEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchLastFailedRunEquals(@RequestParam("schLastFailedRun") @DateTimeFormat(style = "MM") Calendar schLastFailedRun) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchLastFailedRunEquals(schLastFailedRun).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchLastRunBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchLastRunBetween(@RequestParam("minSchLastRun") @DateTimeFormat(style = "MM") Calendar minSchLastRun, @RequestParam("maxSchLastRun") @DateTimeFormat(style = "MM") Calendar maxSchLastRun) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchLastRunBetween(minSchLastRun, maxSchLastRun).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchLastRunEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchLastRunEquals(@RequestParam("schLastRun") @DateTimeFormat(style = "MM") Calendar schLastRun) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchLastRunEquals(schLastRun).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchLastRunStatusEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchLastRunStatusEquals(@RequestParam("schLastRunStatus") String schLastRunStatus) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchLastRunStatusEquals(schLastRunStatus).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchLastSuccessRunBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchLastSuccessRunBetween(@RequestParam("minSchLastSuccessRun") @DateTimeFormat(style = "MM") Calendar minSchLastSuccessRun, @RequestParam("maxSchLastSuccessRun") @DateTimeFormat(style = "MM") Calendar maxSchLastSuccessRun) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchLastSuccessRunBetween(minSchLastSuccessRun, maxSchLastSuccessRun).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchLastSuccessRunEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchLastSuccessRunEquals(@RequestParam("schLastSuccessRun") @DateTimeFormat(style = "MM") Calendar schLastSuccessRun) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchLastSuccessRunEquals(schLastSuccessRun).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchModifiedDateEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchModifiedDateEquals(@RequestParam("schModifiedDate") @DateTimeFormat(style = "MM") Calendar schModifiedDate) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchModifiedDateEquals(schModifiedDate).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchNextRunBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchNextRunBetween(@RequestParam("minSchNextRun") @DateTimeFormat(style = "MM") Calendar minSchNextRun, @RequestParam("maxSchNextRun") @DateTimeFormat(style = "MM") Calendar maxSchNextRun) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchNextRunBetween(minSchNextRun, maxSchNextRun).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchNextRunEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchNextRunEquals(@RequestParam("schNextRun") @DateTimeFormat(style = "MM") Calendar schNextRun) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchNextRunEquals(schNextRun).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchNotificationIdEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchNotificationIdEquals(@RequestParam("schNotificationId") Integer schNotificationId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchNotificationIdEquals(schNotificationId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchProcessingStatusEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchProcessingStatusEquals(@RequestParam("schProcessingStatus") Integer schProcessingStatus) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchProcessingStatusEquals(schProcessingStatus).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchRepeatCountEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchRepeatCountEquals(@RequestParam("schRepeatCount") String schRepeatCount) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchRepeatCountEquals(schRepeatCount).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchRuleCategoryEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchRuleCategoryEquals(@RequestParam("schRuleCategory") String schRuleCategory) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchRuleCategoryEquals(schRuleCategory).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchRuleTypeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchRuleTypeEquals(@RequestParam("schRuleType") String schRuleType) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchRuleTypeEquals(schRuleType).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchStartDateBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchStartDateBetween(@RequestParam("minSchStartDate") @DateTimeFormat(style = "MM") Calendar minSchStartDate, @RequestParam("maxSchStartDate") @DateTimeFormat(style = "MM") Calendar maxSchStartDate) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchStartDateBetween(minSchStartDate, maxSchStartDate).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchStartDateEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchStartDateEquals(@RequestParam("schStartDate") @DateTimeFormat(style = "MM") Calendar schStartDate) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchStartDateEquals(schStartDate).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchStatusEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchStatusEquals(@RequestParam("schStatus") Integer schStatus) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchStatusEquals(schStatus).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchSuccessCountEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchSuccessCountEquals(@RequestParam("schSuccessCount") Integer schSuccessCount) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchSuccessCountEquals(schSuccessCount).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchTimeIntervalEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchTimeIntervalEquals(@RequestParam("schTimeInterval") String schTimeInterval) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchTimeIntervalEquals(schTimeInterval).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySchTypeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpSchedulerController.jsonFindDdpSchedulersBySchTypeEquals(@RequestParam("schType") String schType) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpScheduler.toJsonArray(DdpScheduler.findDdpSchedulersBySchTypeEquals(schType).getResultList()), headers, HttpStatus.OK);
    }
    
}
