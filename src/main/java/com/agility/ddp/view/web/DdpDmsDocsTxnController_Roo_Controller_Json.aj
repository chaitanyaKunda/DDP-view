// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpCategorizedDetail;
import com.agility.ddp.data.domain.DdpCategorizedDocs;
import com.agility.ddp.data.domain.DdpDmsDocsDetail;
import com.agility.ddp.data.domain.DdpDmsDocsTxn;
import com.agility.ddp.view.web.DdpDmsDocsTxnController;
import java.util.List;
import java.util.Set;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect DdpDmsDocsTxnController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{dtxId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.showJson(@PathVariable("dtxId") Integer dtxId) {
        DdpDmsDocsTxn ddpDmsDocsTxn = ddpDmsDocsTxnService.findDdpDmsDocsTxn(dtxId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (ddpDmsDocsTxn == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ddpDmsDocsTxn.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<DdpDmsDocsTxn> result = ddpDmsDocsTxnService.findAllDdpDmsDocsTxns();
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpDmsDocsTxnController.createFromJson(@RequestBody String json) {
        DdpDmsDocsTxn ddpDmsDocsTxn = DdpDmsDocsTxn.fromJsonToDdpDmsDocsTxn(json);
        ddpDmsDocsTxnService.saveDdpDmsDocsTxn(ddpDmsDocsTxn);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpDmsDocsTxnController.createFromJsonArray(@RequestBody String json) {
        for (DdpDmsDocsTxn ddpDmsDocsTxn: DdpDmsDocsTxn.fromJsonArrayToDdpDmsDocsTxns(json)) {
            ddpDmsDocsTxnService.saveDdpDmsDocsTxn(ddpDmsDocsTxn);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{dtxId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> DdpDmsDocsTxnController.updateFromJson(@RequestBody String json, @PathVariable("dtxId") Integer dtxId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        DdpDmsDocsTxn ddpDmsDocsTxn = DdpDmsDocsTxn.fromJsonToDdpDmsDocsTxn(json);
        if (ddpDmsDocsTxnService.updateDdpDmsDocsTxn(ddpDmsDocsTxn) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{dtxId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> DdpDmsDocsTxnController.deleteFromJson(@PathVariable("dtxId") Integer dtxId) {
        DdpDmsDocsTxn ddpDmsDocsTxn = ddpDmsDocsTxnService.findDdpDmsDocsTxn(dtxId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (ddpDmsDocsTxn == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ddpDmsDocsTxnService.deleteDdpDmsDocsTxn(ddpDmsDocsTxn);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDdpCategorizedDetails", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDdpCategorizedDetails(@RequestParam("ddpCategorizedDetails") Set<DdpCategorizedDetail> ddpCategorizedDetails) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDdpCategorizedDetails(ddpCategorizedDetails).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDdpCategorizedDocss", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDdpCategorizedDocss(@RequestParam("ddpCategorizedDocss") Set<DdpCategorizedDocs> ddpCategorizedDocss) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDdpCategorizedDocss(ddpCategorizedDocss).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDdpDmsDocsDetails", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDdpDmsDocsDetails(@RequestParam("ddpDmsDocsDetails") Set<DdpDmsDocsDetail> ddpDmsDocsDetails) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDdpDmsDocsDetails(ddpDmsDocsDetails).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxArchiveEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxArchiveEquals(@RequestParam("dtxArchive") String dtxArchive) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxArchiveEquals(dtxArchive).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxGenSystemEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxGenSystemEquals(@RequestParam("dtxGenSystem") String dtxGenSystem) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxGenSystemEquals(dtxGenSystem).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxGenSystemLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxGenSystemLike(@RequestParam("dtxGenSystem") String dtxGenSystem) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxGenSystemLike(dtxGenSystem).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxIsProcessReqEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxIsProcessReqEquals(@RequestParam("dtxIsProcessReq") String dtxIsProcessReq) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxIsProcessReqEquals(dtxIsProcessReq).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxIsProcessReqNotEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxIsProcessReqNotEquals(@RequestParam("dtxIsProcessReq") String dtxIsProcessReq) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxIsProcessReqNotEquals(dtxIsProcessReq).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxRObjectIdEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxRObjectIdEquals(@RequestParam("dtxRObjectId") String dtxRObjectId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRObjectIdEquals(dtxRObjectId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxRObjectIdIsNotNull", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxRObjectIdIsNotNull() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRObjectIdIsNotNull().getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxRObjectIdIsNull", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxRObjectIdIsNull() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRObjectIdIsNull().getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxRObjectIdLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxRObjectIdLike(@RequestParam("dtxRObjectId") String dtxRObjectId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRObjectIdLike(dtxRObjectId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxRetentionDateIsNotNull", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxRetentionDateIsNotNull() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRetentionDateIsNotNull().getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxRetentionDateIsNull", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxRetentionDateIsNull() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRetentionDateIsNull().getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxRetentionIdBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxRetentionIdBetween(@RequestParam("minDtxRetentionId") Integer minDtxRetentionId, @RequestParam("maxDtxRetentionId") Integer maxDtxRetentionId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRetentionIdBetween(minDtxRetentionId, maxDtxRetentionId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxRetentionIdEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxRetentionIdEquals(@RequestParam("dtxRetentionId") Integer dtxRetentionId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRetentionIdEquals(dtxRetentionId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxRetentionIdIsNotNull", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxRetentionIdIsNotNull() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRetentionIdIsNotNull().getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxRetentionIdIsNull", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxRetentionIdIsNull() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxRetentionIdIsNull().getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxStatusEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxStatusEquals(@RequestParam("dtxStatus") String dtxStatus) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxStatusEquals(dtxStatus).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxStatusNotEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxStatusNotEquals(@RequestParam("dtxStatus") String dtxStatus) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxStatusNotEquals(dtxStatus).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxTransLogsIsNotNull", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxTransLogsIsNotNull() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxTransLogsIsNotNull().getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDtxTransLogsIsNull", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsTxnController.jsonFindDdpDmsDocsTxnsByDtxTransLogsIsNull() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsTxn.toJsonArray(DdpDmsDocsTxn.findDdpDmsDocsTxnsByDtxTransLogsIsNull().getResultList()), headers, HttpStatus.OK);
    }
    
}
