// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpDmsDocsDetail;
import com.agility.ddp.data.domain.DdpDmsDocsTxn;
import com.agility.ddp.view.web.DdpDmsDocsDetailController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect DdpDmsDocsDetailController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{dddId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.showJson(@PathVariable("dddId") Integer dddId) {
        DdpDmsDocsDetail ddpDmsDocsDetail = ddpDmsDocsDetailService.findDdpDmsDocsDetail(dddId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (ddpDmsDocsDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ddpDmsDocsDetail.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<DdpDmsDocsDetail> result = ddpDmsDocsDetailService.findAllDdpDmsDocsDetails();
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpDmsDocsDetailController.createFromJson(@RequestBody String json) {
        DdpDmsDocsDetail ddpDmsDocsDetail = DdpDmsDocsDetail.fromJsonToDdpDmsDocsDetail(json);
        ddpDmsDocsDetailService.saveDdpDmsDocsDetail(ddpDmsDocsDetail);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpDmsDocsDetailController.createFromJsonArray(@RequestBody String json) {
        for (DdpDmsDocsDetail ddpDmsDocsDetail: DdpDmsDocsDetail.fromJsonArrayToDdpDmsDocsDetails(json)) {
            ddpDmsDocsDetailService.saveDdpDmsDocsDetail(ddpDmsDocsDetail);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{dddId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> DdpDmsDocsDetailController.updateFromJson(@RequestBody String json, @PathVariable("dddId") Integer dddId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        DdpDmsDocsDetail ddpDmsDocsDetail = DdpDmsDocsDetail.fromJsonToDdpDmsDocsDetail(json);
        if (ddpDmsDocsDetailService.updateDdpDmsDocsDetail(ddpDmsDocsDetail) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{dddId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> DdpDmsDocsDetailController.deleteFromJson(@PathVariable("dddId") Integer dddId) {
        DdpDmsDocsDetail ddpDmsDocsDetail = ddpDmsDocsDetailService.findDdpDmsDocsDetail(dddId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (ddpDmsDocsDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ddpDmsDocsDetailService.deleteDdpDmsDocsDetail(ddpDmsDocsDetail);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddBatchNameEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddBatchNameEquals(@RequestParam("dddBatchName") String dddBatchName) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddBatchNameEquals(dddBatchName).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddBillOfLadingNumberEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddBillOfLadingNumberEquals(@RequestParam("dddBillOfLadingNumber") String dddBillOfLadingNumber) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddBillOfLadingNumberEquals(dddBillOfLadingNumber).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddBranchDestinationEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddBranchDestinationEquals(@RequestParam("dddBranchDestination") String dddBranchDestination) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddBranchDestinationEquals(dddBranchDestination).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddBranchSourceEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddBranchSourceEquals(@RequestParam("dddBranchSource") String dddBranchSource) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddBranchSourceEquals(dddBranchSource).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddCarrierRefEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddCarrierRefEquals(@RequestParam("dddCarrierRef") String dddCarrierRef) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddCarrierRefEquals(dddCarrierRef).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddClientIdEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddClientIdEquals(@RequestParam("dddClientId") String dddClientId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddClientIdEquals(dddClientId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddCompanyDestinationEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddCompanyDestinationEquals(@RequestParam("dddCompanyDestination") String dddCompanyDestination) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddCompanyDestinationEquals(dddCompanyDestination).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddCompanySourceEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddCompanySourceEquals(@RequestParam("dddCompanySource") String dddCompanySource) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddCompanySourceEquals(dddCompanySource).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddConsigneeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddConsigneeEquals(@RequestParam("dddConsignee") String dddConsignee) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddConsigneeEquals(dddConsignee).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddConsignmentIdEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddConsignmentIdEquals(@RequestParam("dddConsignmentId") String dddConsignmentId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddConsignmentIdEquals(dddConsignmentId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddContentSizeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddContentSizeEquals(@RequestParam("dddContentSize") String dddContentSize) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddContentSizeEquals(dddContentSize).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddContentTypeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddContentTypeEquals(@RequestParam("dddContentType") String dddContentType) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddContentTypeEquals(dddContentType).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddControlDocTypeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddControlDocTypeEquals(@RequestParam("dddControlDocType") String dddControlDocType) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddControlDocTypeEquals(dddControlDocType).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddControlDocTypeIsNotNull", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddControlDocTypeIsNotNull() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddControlDocTypeIsNotNull().getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddControlDocTypeIsNull", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddControlDocTypeIsNull() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddControlDocTypeIsNull().getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddControlDocTypeLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddControlDocTypeLike(@RequestParam("dddControlDocType") String dddControlDocType) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddControlDocTypeLike(dddControlDocType).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddControlDocTypeNotEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddControlDocTypeNotEquals(@RequestParam("dddControlDocType") String dddControlDocType) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddControlDocTypeNotEquals(dddControlDocType).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddCustomsEntryNoEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddCustomsEntryNoEquals(@RequestParam("dddCustomsEntryNo") String dddCustomsEntryNo) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddCustomsEntryNoEquals(dddCustomsEntryNo).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddDebitsBackEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddDebitsBackEquals(@RequestParam("dddDebitsBack") String dddDebitsBack) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddDebitsBackEquals(dddDebitsBack).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddDebitsForwardEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddDebitsForwardEquals(@RequestParam("dddDebitsForward") String dddDebitsForward) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddDebitsForwardEquals(dddDebitsForward).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddDeptDestinationEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddDeptDestinationEquals(@RequestParam("dddDeptDestination") String dddDeptDestination) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddDeptDestinationEquals(dddDeptDestination).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddDeptSourceEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddDeptSourceEquals(@RequestParam("dddDeptSource") String dddDeptSource) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddDeptSourceEquals(dddDeptSource).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddDocRefEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddDocRefEquals(@RequestParam("dddDocRef") String dddDocRef) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddDocRefEquals(dddDocRef).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddDtxId", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddDtxId(@RequestParam("dddDtxId") DdpDmsDocsTxn dddDtxId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddDtxId(dddDtxId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddFileTypeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddFileTypeEquals(@RequestParam("dddFileType") String dddFileType) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddFileTypeEquals(dddFileType).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddFinalAgentIdEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddFinalAgentIdEquals(@RequestParam("dddFinalAgentId") String dddFinalAgentId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddFinalAgentIdEquals(dddFinalAgentId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddGeneratingSystemEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddGeneratingSystemEquals(@RequestParam("dddGeneratingSystem") String dddGeneratingSystem) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddGeneratingSystemEquals(dddGeneratingSystem).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddGlobalDocRefEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddGlobalDocRefEquals(@RequestParam("dddGlobalDocRef") String dddGlobalDocRef) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddGlobalDocRefEquals(dddGlobalDocRef).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddHouseAirwayBillNumEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddHouseAirwayBillNumEquals(@RequestParam("dddHouseAirwayBillNum") String dddHouseAirwayBillNum) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddHouseAirwayBillNumEquals(dddHouseAirwayBillNum).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddInitialAgentEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddInitialAgentEquals(@RequestParam("dddInitialAgent") String dddInitialAgent) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddInitialAgentEquals(dddInitialAgent).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddIntermediateAgentEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddIntermediateAgentEquals(@RequestParam("dddIntermediateAgent") String dddIntermediateAgent) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddIntermediateAgentEquals(dddIntermediateAgent).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddIsRatedEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddIsRatedEquals(@RequestParam("dddIsRated") Integer dddIsRated) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddIsRatedEquals(dddIsRated).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddJobNumberEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddJobNumberEquals(@RequestParam("dddJobNumber") String dddJobNumber) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddJobNumberEquals(dddJobNumber).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddMasterAirwayBillNumEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddMasterAirwayBillNumEquals(@RequestParam("dddMasterAirwayBillNum") String dddMasterAirwayBillNum) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddMasterAirwayBillNumEquals(dddMasterAirwayBillNum).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddMasterJobNumberEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddMasterJobNumberEquals(@RequestParam("dddMasterJobNumber") String dddMasterJobNumber) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddMasterJobNumberEquals(dddMasterJobNumber).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddNotifyPartyEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddNotifyPartyEquals(@RequestParam("dddNotifyParty") String dddNotifyParty) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddNotifyPartyEquals(dddNotifyParty).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddObjectNameEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddObjectNameEquals(@RequestParam("dddObjectName") String dddObjectName) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddObjectNameEquals(dddObjectName).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddRObjectIdEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddRObjectIdEquals(@RequestParam("dddRObjectId") String dddRObjectId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddRObjectIdEquals(dddRObjectId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddShipperEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddShipperEquals(@RequestParam("dddShipper") String dddShipper) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddShipperEquals(dddShipper).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddUserIdEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddUserIdEquals(@RequestParam("dddUserId") String dddUserId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddUserIdEquals(dddUserId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDddUserReferenceEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpDmsDocsDetailController.jsonFindDdpDmsDocsDetailsByDddUserReferenceEquals(@RequestParam("dddUserReference") String dddUserReference) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpDmsDocsDetail.toJsonArray(DdpDmsDocsDetail.findDdpDmsDocsDetailsByDddUserReferenceEquals(dddUserReference).getResultList()), headers, HttpStatus.OK);
    }
    
}
