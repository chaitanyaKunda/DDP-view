// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpExportMissingDocs;
import com.agility.ddp.view.web.DdpExportMissingDocsController;
import java.util.Calendar;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect DdpExportMissingDocsController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{misId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpExportMissingDocsController.showJson(@PathVariable("misId") Integer misId) {
        DdpExportMissingDocs ddpExportMissingDocs = ddpExportMissingDocsService.findDdpExportMissingDocs(misId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (ddpExportMissingDocs == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ddpExportMissingDocs.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpExportMissingDocsController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<DdpExportMissingDocs> result = ddpExportMissingDocsService.findAllDdpExportMissingDocses();
        return new ResponseEntity<String>(DdpExportMissingDocs.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpExportMissingDocsController.createFromJson(@RequestBody String json) {
        DdpExportMissingDocs ddpExportMissingDocs = DdpExportMissingDocs.fromJsonToDdpExportMissingDocs(json);
        ddpExportMissingDocsService.saveDdpExportMissingDocs(ddpExportMissingDocs);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpExportMissingDocsController.createFromJsonArray(@RequestBody String json) {
        for (DdpExportMissingDocs ddpExportMissingDocs: DdpExportMissingDocs.fromJsonArrayToDdpExportMissingDocses(json)) {
            ddpExportMissingDocsService.saveDdpExportMissingDocs(ddpExportMissingDocs);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{misId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> DdpExportMissingDocsController.updateFromJson(@RequestBody String json, @PathVariable("misId") Integer misId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        DdpExportMissingDocs ddpExportMissingDocs = DdpExportMissingDocs.fromJsonToDdpExportMissingDocs(json);
        if (ddpExportMissingDocsService.updateDdpExportMissingDocs(ddpExportMissingDocs) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{misId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> DdpExportMissingDocsController.deleteFromJson(@PathVariable("misId") Integer misId) {
        DdpExportMissingDocs ddpExportMissingDocs = ddpExportMissingDocsService.findDdpExportMissingDocs(misId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (ddpExportMissingDocs == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ddpExportMissingDocsService.deleteDdpExportMissingDocs(ddpExportMissingDocs);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMisAppNameEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpExportMissingDocsController.jsonFindDdpExportMissingDocsesByMisAppNameEquals(@RequestParam("misAppName") String misAppName) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpExportMissingDocs.toJsonArray(DdpExportMissingDocs.findDdpExportMissingDocsesByMisAppNameEquals(misAppName).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMisAppNameIsNull", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpExportMissingDocsController.jsonFindDdpExportMissingDocsesByMisAppNameIsNull() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpExportMissingDocs.toJsonArray(DdpExportMissingDocs.findDdpExportMissingDocsesByMisAppNameIsNull().getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMisConsignmentIdEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpExportMissingDocsController.jsonFindDdpExportMissingDocsesByMisConsignmentIdEquals(@RequestParam("misConsignmentId") String misConsignmentId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpExportMissingDocs.toJsonArray(DdpExportMissingDocs.findDdpExportMissingDocsesByMisConsignmentIdEquals(misConsignmentId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMisCreatedDateBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpExportMissingDocsController.jsonFindDdpExportMissingDocsesByMisCreatedDateBetween(@RequestParam("minMisCreatedDate") @DateTimeFormat(style = "MM") Calendar minMisCreatedDate, @RequestParam("maxMisCreatedDate") @DateTimeFormat(style = "MM") Calendar maxMisCreatedDate) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpExportMissingDocs.toJsonArray(DdpExportMissingDocs.findDdpExportMissingDocsesByMisCreatedDateBetween(minMisCreatedDate, maxMisCreatedDate).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMisCreatedDateGreaterThan", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpExportMissingDocsController.jsonFindDdpExportMissingDocsesByMisCreatedDateGreaterThan(@RequestParam("misCreatedDate") @DateTimeFormat(style = "MM") Calendar misCreatedDate) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpExportMissingDocs.toJsonArray(DdpExportMissingDocs.findDdpExportMissingDocsesByMisCreatedDateGreaterThan(misCreatedDate).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMisDocTypeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpExportMissingDocsController.jsonFindDdpExportMissingDocsesByMisDocTypeEquals(@RequestParam("misDocType") String misDocType) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpExportMissingDocs.toJsonArray(DdpExportMissingDocs.findDdpExportMissingDocsesByMisDocTypeEquals(misDocType).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMisEntryNoEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpExportMissingDocsController.jsonFindDdpExportMissingDocsesByMisEntryNoEquals(@RequestParam("misEntryNo") String misEntryNo) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpExportMissingDocs.toJsonArray(DdpExportMissingDocs.findDdpExportMissingDocsesByMisEntryNoEquals(misEntryNo).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMisEntryTypeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpExportMissingDocsController.jsonFindDdpExportMissingDocsesByMisEntryTypeEquals(@RequestParam("misEntryType") String misEntryType) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpExportMissingDocs.toJsonArray(DdpExportMissingDocs.findDdpExportMissingDocsesByMisEntryTypeEquals(misEntryType).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMisExpRuleIdEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpExportMissingDocsController.jsonFindDdpExportMissingDocsesByMisExpRuleIdEquals(@RequestParam("misExpRuleId") Integer misExpRuleId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpExportMissingDocs.toJsonArray(DdpExportMissingDocs.findDdpExportMissingDocsesByMisExpRuleIdEquals(misExpRuleId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMisJobNumberEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpExportMissingDocsController.jsonFindDdpExportMissingDocsesByMisJobNumberEquals(@RequestParam("misJobNumber") String misJobNumber) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpExportMissingDocs.toJsonArray(DdpExportMissingDocs.findDdpExportMissingDocsesByMisJobNumberEquals(misJobNumber).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMisStatusEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpExportMissingDocsController.jsonFindDdpExportMissingDocsesByMisStatusEquals(@RequestParam("misStatus") Integer misStatus) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpExportMissingDocs.toJsonArray(DdpExportMissingDocs.findDdpExportMissingDocsesByMisStatusEquals(misStatus).getResultList()), headers, HttpStatus.OK);
    }
    
}
