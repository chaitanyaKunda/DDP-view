// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpCategorizedAuditTxnService;
import com.agility.ddp.data.domain.DdpCategorizedDocs;
import com.agility.ddp.data.domain.DdpCategorizedDocsService;
import com.agility.ddp.data.domain.DdpDmsDocsTxnService;
import com.agility.ddp.data.domain.DdpRuleService;
import com.agility.ddp.view.web.DdpCategorizedDocsController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect DdpCategorizedDocsController_Roo_Controller {
    
    
    @Autowired
    DdpCategorizedAuditTxnService DdpCategorizedDocsController.ddpCategorizedAuditTxnService;
    
    @Autowired
    DdpDmsDocsTxnService DdpCategorizedDocsController.ddpDmsDocsTxnService;
    
    @Autowired
    DdpRuleService DdpCategorizedDocsController.ddpRuleService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String DdpCategorizedDocsController.create(@Valid DdpCategorizedDocs ddpCategorizedDocs, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpCategorizedDocs);
            return "ddpcategorizeddocses/create";
        }
        uiModel.asMap().clear();
        ddpCategorizedDocsService.saveDdpCategorizedDocs(ddpCategorizedDocs);
        return "redirect:/ddpcategorizeddocses/" + encodeUrlPathSegment(ddpCategorizedDocs.getCatId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String DdpCategorizedDocsController.createForm(Model uiModel) {
        populateEditForm(uiModel, new DdpCategorizedDocs());
        return "ddpcategorizeddocses/create";
    }
    
    @RequestMapping(value = "/{catId}", produces = "text/html")
    public String DdpCategorizedDocsController.show(@PathVariable("catId") Integer catId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpcategorizeddocs", ddpCategorizedDocsService.findDdpCategorizedDocs(catId));
        uiModel.addAttribute("itemId", catId);
        return "ddpcategorizeddocses/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String DdpCategorizedDocsController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddpcategorizeddocses", ddpCategorizedDocsService.findDdpCategorizedDocsEntries(firstResult, sizeNo));
            float nrOfPages = (float) ddpCategorizedDocsService.countAllDdpCategorizedDocses() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddpcategorizeddocses", ddpCategorizedDocsService.findAllDdpCategorizedDocses());
        }
        addDateTimeFormatPatterns(uiModel);
        return "ddpcategorizeddocses/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String DdpCategorizedDocsController.update(@Valid DdpCategorizedDocs ddpCategorizedDocs, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpCategorizedDocs);
            return "ddpcategorizeddocses/update";
        }
        uiModel.asMap().clear();
        ddpCategorizedDocsService.updateDdpCategorizedDocs(ddpCategorizedDocs);
        return "redirect:/ddpcategorizeddocses/" + encodeUrlPathSegment(ddpCategorizedDocs.getCatId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{catId}", params = "form", produces = "text/html")
    public String DdpCategorizedDocsController.updateForm(@PathVariable("catId") Integer catId, Model uiModel) {
        populateEditForm(uiModel, ddpCategorizedDocsService.findDdpCategorizedDocs(catId));
        return "ddpcategorizeddocses/update";
    }
    
    @RequestMapping(value = "/{catId}", method = RequestMethod.DELETE, produces = "text/html")
    public String DdpCategorizedDocsController.delete(@PathVariable("catId") Integer catId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        DdpCategorizedDocs ddpCategorizedDocs = ddpCategorizedDocsService.findDdpCategorizedDocs(catId);
        ddpCategorizedDocsService.deleteDdpCategorizedDocs(ddpCategorizedDocs);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ddpcategorizeddocses";
    }
    
    void DdpCategorizedDocsController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ddpCategorizedDocs_catcurrentpmstarttime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ddpCategorizedDocs_catcreateddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ddpCategorizedDocs_catmodifieddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void DdpCategorizedDocsController.populateEditForm(Model uiModel, DdpCategorizedDocs ddpCategorizedDocs) {
        uiModel.addAttribute("ddpCategorizedDocs", ddpCategorizedDocs);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpcategorizedaudittxns", ddpCategorizedAuditTxnService.findAllDdpCategorizedAuditTxns());
        uiModel.addAttribute("ddpdmsdocstxns", ddpDmsDocsTxnService.findAllDdpDmsDocsTxns());
        uiModel.addAttribute("ddprules", ddpRuleService.findAllDdpRules());
    }
    
    String DdpCategorizedDocsController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
