// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpCategorizedAuditTxn;
import com.agility.ddp.data.domain.DdpCategorizedAuditTxnService;
import com.agility.ddp.data.domain.DdpCategorizedDocsService;
import com.agility.ddp.view.web.DdpCategorizedAuditTxnController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect DdpCategorizedAuditTxnController_Roo_Controller {
    
    @Autowired
    DdpCategorizedAuditTxnService DdpCategorizedAuditTxnController.ddpCategorizedAuditTxnService;
    
    @Autowired
    DdpCategorizedDocsService DdpCategorizedAuditTxnController.ddpCategorizedDocsService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String DdpCategorizedAuditTxnController.create(@Valid DdpCategorizedAuditTxn ddpCategorizedAuditTxn, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpCategorizedAuditTxn);
            return "ddpcategorizedaudittxns/create";
        }
        uiModel.asMap().clear();
        ddpCategorizedAuditTxnService.saveDdpCategorizedAuditTxn(ddpCategorizedAuditTxn);
        return "redirect:/ddpcategorizedaudittxns/" + encodeUrlPathSegment(ddpCategorizedAuditTxn.getCaxId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String DdpCategorizedAuditTxnController.createForm(Model uiModel) {
        populateEditForm(uiModel, new DdpCategorizedAuditTxn());
        return "ddpcategorizedaudittxns/create";
    }
    
    @RequestMapping(value = "/{caxId}", produces = "text/html")
    public String DdpCategorizedAuditTxnController.show(@PathVariable("caxId") Integer caxId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpcategorizedaudittxn", ddpCategorizedAuditTxnService.findDdpCategorizedAuditTxn(caxId));
        uiModel.addAttribute("itemId", caxId);
        return "ddpcategorizedaudittxns/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String DdpCategorizedAuditTxnController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddpcategorizedaudittxns", ddpCategorizedAuditTxnService.findDdpCategorizedAuditTxnEntries(firstResult, sizeNo));
            float nrOfPages = (float) ddpCategorizedAuditTxnService.countAllDdpCategorizedAuditTxns() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddpcategorizedaudittxns", ddpCategorizedAuditTxnService.findAllDdpCategorizedAuditTxns());
        }
        addDateTimeFormatPatterns(uiModel);
        return "ddpcategorizedaudittxns/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String DdpCategorizedAuditTxnController.update(@Valid DdpCategorizedAuditTxn ddpCategorizedAuditTxn, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpCategorizedAuditTxn);
            return "ddpcategorizedaudittxns/update";
        }
        uiModel.asMap().clear();
        ddpCategorizedAuditTxnService.updateDdpCategorizedAuditTxn(ddpCategorizedAuditTxn);
        return "redirect:/ddpcategorizedaudittxns/" + encodeUrlPathSegment(ddpCategorizedAuditTxn.getCaxId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{caxId}", params = "form", produces = "text/html")
    public String DdpCategorizedAuditTxnController.updateForm(@PathVariable("caxId") Integer caxId, Model uiModel) {
        populateEditForm(uiModel, ddpCategorizedAuditTxnService.findDdpCategorizedAuditTxn(caxId));
        return "ddpcategorizedaudittxns/update";
    }
    
    @RequestMapping(value = "/{caxId}", method = RequestMethod.DELETE, produces = "text/html")
    public String DdpCategorizedAuditTxnController.delete(@PathVariable("caxId") Integer caxId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        DdpCategorizedAuditTxn ddpCategorizedAuditTxn = ddpCategorizedAuditTxnService.findDdpCategorizedAuditTxn(caxId);
        ddpCategorizedAuditTxnService.deleteDdpCategorizedAuditTxn(ddpCategorizedAuditTxn);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ddpcategorizedaudittxns";
    }
    
    void DdpCategorizedAuditTxnController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ddpCategorizedAuditTxn_caxpminitiateddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void DdpCategorizedAuditTxnController.populateEditForm(Model uiModel, DdpCategorizedAuditTxn ddpCategorizedAuditTxn) {
        uiModel.addAttribute("ddpCategorizedAuditTxn", ddpCategorizedAuditTxn);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpcategorizeddocses", ddpCategorizedDocsService.findAllDdpCategorizedDocses());
    }
    
    String DdpCategorizedAuditTxnController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
