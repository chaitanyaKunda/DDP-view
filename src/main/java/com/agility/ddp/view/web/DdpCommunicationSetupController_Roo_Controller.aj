// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpAedRuleService;
import com.agility.ddp.data.domain.DdpCommunicationSetup;
import com.agility.ddp.data.domain.DdpCommunicationSetupService;
import com.agility.ddp.data.domain.DdpExportRuleService;
import com.agility.ddp.data.domain.DdpMultiAedRuleService;
import com.agility.ddp.data.domain.DdpRuleDetailService;
import com.agility.ddp.view.web.DdpCommunicationSetupController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect DdpCommunicationSetupController_Roo_Controller {
    
    @Autowired
    DdpCommunicationSetupService DdpCommunicationSetupController.ddpCommunicationSetupService;
    
    @Autowired
    DdpAedRuleService DdpCommunicationSetupController.ddpAedRuleService;
    
    @Autowired
    DdpExportRuleService DdpCommunicationSetupController.ddpExportRuleService;
    
    @Autowired
    DdpMultiAedRuleService DdpCommunicationSetupController.ddpMultiAedRuleService;
    
    @Autowired
    DdpRuleDetailService DdpCommunicationSetupController.ddpRuleDetailService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String DdpCommunicationSetupController.create(@Valid DdpCommunicationSetup ddpCommunicationSetup, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpCommunicationSetup);
            return "ddpcommunicationsetups/create";
        }
        uiModel.asMap().clear();
        ddpCommunicationSetupService.saveDdpCommunicationSetup(ddpCommunicationSetup);
        return "redirect:/ddpcommunicationsetups/" + encodeUrlPathSegment(ddpCommunicationSetup.getCmsCommunicationId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String DdpCommunicationSetupController.createForm(Model uiModel) {
        populateEditForm(uiModel, new DdpCommunicationSetup());
        return "ddpcommunicationsetups/create";
    }
    
    @RequestMapping(value = "/{cmsCommunicationId}", produces = "text/html")
    public String DdpCommunicationSetupController.show(@PathVariable("cmsCommunicationId") Integer cmsCommunicationId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpcommunicationsetup", ddpCommunicationSetupService.findDdpCommunicationSetup(cmsCommunicationId));
        uiModel.addAttribute("itemId", cmsCommunicationId);
        return "ddpcommunicationsetups/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String DdpCommunicationSetupController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddpcommunicationsetups", ddpCommunicationSetupService.findDdpCommunicationSetupEntries(firstResult, sizeNo));
            float nrOfPages = (float) ddpCommunicationSetupService.countAllDdpCommunicationSetups() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddpcommunicationsetups", ddpCommunicationSetupService.findAllDdpCommunicationSetups());
        }
        addDateTimeFormatPatterns(uiModel);
        return "ddpcommunicationsetups/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String DdpCommunicationSetupController.update(@Valid DdpCommunicationSetup ddpCommunicationSetup, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpCommunicationSetup);
            return "ddpcommunicationsetups/update";
        }
        uiModel.asMap().clear();
        ddpCommunicationSetupService.updateDdpCommunicationSetup(ddpCommunicationSetup);
        return "redirect:/ddpcommunicationsetups/" + encodeUrlPathSegment(ddpCommunicationSetup.getCmsCommunicationId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{cmsCommunicationId}", params = "form", produces = "text/html")
    public String DdpCommunicationSetupController.updateForm(@PathVariable("cmsCommunicationId") Integer cmsCommunicationId, Model uiModel) {
        populateEditForm(uiModel, ddpCommunicationSetupService.findDdpCommunicationSetup(cmsCommunicationId));
        return "ddpcommunicationsetups/update";
    }
    
    @RequestMapping(value = "/{cmsCommunicationId}", method = RequestMethod.DELETE, produces = "text/html")
    public String DdpCommunicationSetupController.delete(@PathVariable("cmsCommunicationId") Integer cmsCommunicationId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        DdpCommunicationSetup ddpCommunicationSetup = ddpCommunicationSetupService.findDdpCommunicationSetup(cmsCommunicationId);
        ddpCommunicationSetupService.deleteDdpCommunicationSetup(ddpCommunicationSetup);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ddpcommunicationsetups";
    }
    
    void DdpCommunicationSetupController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ddpCommunicationSetup_cmscreateddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ddpCommunicationSetup_cmsmodifieddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void DdpCommunicationSetupController.populateEditForm(Model uiModel, DdpCommunicationSetup ddpCommunicationSetup) {
        uiModel.addAttribute("ddpCommunicationSetup", ddpCommunicationSetup);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpaedrules", ddpAedRuleService.findAllDdpAedRules());
        uiModel.addAttribute("ddpexportrules", ddpExportRuleService.findAllDdpExportRules());
        uiModel.addAttribute("ddpmultiaedrules", ddpMultiAedRuleService.findAllDdpMultiAedRules());
        uiModel.addAttribute("ddpruledetails", ddpRuleDetailService.findAllDdpRuleDetails());
    }
    
    String DdpCommunicationSetupController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
