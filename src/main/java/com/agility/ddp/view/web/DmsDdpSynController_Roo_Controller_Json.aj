// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DmsDdpSyn;
import com.agility.ddp.view.web.DmsDdpSynController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect DmsDdpSynController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{synId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DmsDdpSynController.showJson(@PathVariable("synId") Integer synId) {
        DmsDdpSyn dmsDdpSyn = dmsDdpSynService.findDmsDdpSyn(synId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (dmsDdpSyn == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(dmsDdpSyn.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DmsDdpSynController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<DmsDdpSyn> result = dmsDdpSynService.findAllDmsDdpSyns();
        return new ResponseEntity<String>(DmsDdpSyn.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DmsDdpSynController.createFromJson(@RequestBody String json) {
        DmsDdpSyn dmsDdpSyn = DmsDdpSyn.fromJsonToDmsDdpSyn(json);
        dmsDdpSynService.saveDmsDdpSyn(dmsDdpSyn);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DmsDdpSynController.createFromJsonArray(@RequestBody String json) {
        for (DmsDdpSyn dmsDdpSyn: DmsDdpSyn.fromJsonArrayToDmsDdpSyns(json)) {
            dmsDdpSynService.saveDmsDdpSyn(dmsDdpSyn);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{synId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> DmsDdpSynController.updateFromJson(@RequestBody String json, @PathVariable("synId") Integer synId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        DmsDdpSyn dmsDdpSyn = DmsDdpSyn.fromJsonToDmsDdpSyn(json);
        if (dmsDdpSynService.updateDmsDdpSyn(dmsDdpSyn) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{synId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> DmsDdpSynController.deleteFromJson(@PathVariable("synId") Integer synId) {
        DmsDdpSyn dmsDdpSyn = dmsDdpSynService.findDmsDdpSyn(synId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (dmsDdpSyn == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        dmsDdpSynService.deleteDmsDdpSyn(dmsDdpSyn);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
