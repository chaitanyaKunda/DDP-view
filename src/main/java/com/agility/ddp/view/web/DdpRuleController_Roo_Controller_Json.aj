// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpAedRule;
import com.agility.ddp.data.domain.DdpExportRule;
import com.agility.ddp.data.domain.DdpRule;
import com.agility.ddp.view.web.DdpRuleController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect DdpRuleController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{rulId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpRuleController.showJson(@PathVariable("rulId") Integer rulId) {
        DdpRule ddpRule = ddpRuleService.findDdpRule(rulId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (ddpRule == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ddpRule.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpRuleController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<DdpRule> result = ddpRuleService.findAllDdpRules();
        return new ResponseEntity<String>(DdpRule.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpRuleController.createFromJson(@RequestBody String json) {
        DdpRule ddpRule = DdpRule.fromJsonToDdpRule(json);
        ddpRuleService.saveDdpRule(ddpRule);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpRuleController.createFromJsonArray(@RequestBody String json) {
        for (DdpRule ddpRule: DdpRule.fromJsonArrayToDdpRules(json)) {
            ddpRuleService.saveDdpRule(ddpRule);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{rulId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> DdpRuleController.updateFromJson(@RequestBody String json, @PathVariable("rulId") Integer rulId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        DdpRule ddpRule = DdpRule.fromJsonToDdpRule(json);
        if (ddpRuleService.updateDdpRule(ddpRule) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{rulId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> DdpRuleController.deleteFromJson(@PathVariable("rulId") Integer rulId) {
        DdpRule ddpRule = ddpRuleService.findDdpRule(rulId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (ddpRule == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ddpRuleService.deleteDdpRule(ddpRule);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDdpAedRule", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpRuleController.jsonFindDdpRulesByDdpAedRule(@RequestParam("ddpAedRule") DdpAedRule ddpAedRule) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpRule.toJsonArray(DdpRule.findDdpRulesByDdpAedRule(ddpAedRule).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDdpExportRule", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpRuleController.jsonFindDdpRulesByDdpExportRule(@RequestParam("ddpExportRule") DdpExportRule ddpExportRule) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DdpRule.toJsonArray(DdpRule.findDdpRulesByDdpExportRule(ddpExportRule).getResultList()), headers, HttpStatus.OK);
    }
    
}
