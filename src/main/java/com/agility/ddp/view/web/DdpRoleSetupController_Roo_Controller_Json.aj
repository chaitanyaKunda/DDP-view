// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpRoleSetup;
import com.agility.ddp.view.web.DdpRoleSetupController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect DdpRoleSetupController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{rlsId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpRoleSetupController.showJson(@PathVariable("rlsId") Integer rlsId) {
        DdpRoleSetup ddpRoleSetup = ddpRoleSetupService.findDdpRoleSetup(rlsId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (ddpRoleSetup == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ddpRoleSetup.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpRoleSetupController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<DdpRoleSetup> result = ddpRoleSetupService.findAllDdpRoleSetups();
        return new ResponseEntity<String>(DdpRoleSetup.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpRoleSetupController.createFromJson(@RequestBody String json) {
        DdpRoleSetup ddpRoleSetup = DdpRoleSetup.fromJsonToDdpRoleSetup(json);
        ddpRoleSetupService.saveDdpRoleSetup(ddpRoleSetup);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpRoleSetupController.createFromJsonArray(@RequestBody String json) {
        for (DdpRoleSetup ddpRoleSetup: DdpRoleSetup.fromJsonArrayToDdpRoleSetups(json)) {
            ddpRoleSetupService.saveDdpRoleSetup(ddpRoleSetup);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{rlsId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> DdpRoleSetupController.updateFromJson(@RequestBody String json, @PathVariable("rlsId") Integer rlsId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        DdpRoleSetup ddpRoleSetup = DdpRoleSetup.fromJsonToDdpRoleSetup(json);
        if (ddpRoleSetupService.updateDdpRoleSetup(ddpRoleSetup) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{rlsId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> DdpRoleSetupController.deleteFromJson(@PathVariable("rlsId") Integer rlsId) {
        DdpRoleSetup ddpRoleSetup = ddpRoleSetupService.findDdpRoleSetup(rlsId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (ddpRoleSetup == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ddpRoleSetupService.deleteDdpRoleSetup(ddpRoleSetup);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
