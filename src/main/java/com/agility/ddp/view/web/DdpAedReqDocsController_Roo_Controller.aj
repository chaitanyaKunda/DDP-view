// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpAedReqDocs;
import com.agility.ddp.data.domain.DdpAedReqDocsService;
import com.agility.ddp.data.domain.DdpMergeSetupService;
import com.agility.ddp.view.web.DdpAedReqDocsController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect DdpAedReqDocsController_Roo_Controller {
    
    @Autowired
    DdpAedReqDocsService DdpAedReqDocsController.ddpAedReqDocsService;
    
    @Autowired
    DdpMergeSetupService DdpAedReqDocsController.ddpMergeSetupService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String DdpAedReqDocsController.create(@Valid DdpAedReqDocs ddpAedReqDocs, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpAedReqDocs);
            return "ddpaedreqdocses/create";
        }
        uiModel.asMap().clear();
        ddpAedReqDocsService.saveDdpAedReqDocs(ddpAedReqDocs);
        return "redirect:/ddpaedreqdocses/" + encodeUrlPathSegment(ddpAedReqDocs.getArdMergeId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String DdpAedReqDocsController.createForm(Model uiModel) {
        populateEditForm(uiModel, new DdpAedReqDocs());
        return "ddpaedreqdocses/create";
    }
    
    @RequestMapping(value = "/{ardMergeId}", produces = "text/html")
    public String DdpAedReqDocsController.show(@PathVariable("ardMergeId") Integer ardMergeId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpaedreqdocs", ddpAedReqDocsService.findDdpAedReqDocs(ardMergeId));
        uiModel.addAttribute("itemId", ardMergeId);
        return "ddpaedreqdocses/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String DdpAedReqDocsController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddpaedreqdocses", ddpAedReqDocsService.findDdpAedReqDocsEntries(firstResult, sizeNo));
            float nrOfPages = (float) ddpAedReqDocsService.countAllDdpAedReqDocses() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddpaedreqdocses", ddpAedReqDocsService.findAllDdpAedReqDocses());
        }
        addDateTimeFormatPatterns(uiModel);
        return "ddpaedreqdocses/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String DdpAedReqDocsController.update(@Valid DdpAedReqDocs ddpAedReqDocs, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpAedReqDocs);
            return "ddpaedreqdocses/update";
        }
        uiModel.asMap().clear();
        ddpAedReqDocsService.updateDdpAedReqDocs(ddpAedReqDocs);
        return "redirect:/ddpaedreqdocses/" + encodeUrlPathSegment(ddpAedReqDocs.getArdMergeId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{ardMergeId}", params = "form", produces = "text/html")
    public String DdpAedReqDocsController.updateForm(@PathVariable("ardMergeId") Integer ardMergeId, Model uiModel) {
        populateEditForm(uiModel, ddpAedReqDocsService.findDdpAedReqDocs(ardMergeId));
        return "ddpaedreqdocses/update";
    }
    
    @RequestMapping(value = "/{ardMergeId}", method = RequestMethod.DELETE, produces = "text/html")
    public String DdpAedReqDocsController.delete(@PathVariable("ardMergeId") Integer ardMergeId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        DdpAedReqDocs ddpAedReqDocs = ddpAedReqDocsService.findDdpAedReqDocs(ardMergeId);
        ddpAedReqDocsService.deleteDdpAedReqDocs(ddpAedReqDocs);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ddpaedreqdocses";
    }
    
    void DdpAedReqDocsController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ddpAedReqDocs_ardcreateddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ddpAedReqDocs_ardmodifieddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void DdpAedReqDocsController.populateEditForm(Model uiModel, DdpAedReqDocs ddpAedReqDocs) {
        uiModel.addAttribute("ddpAedReqDocs", ddpAedReqDocs);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpmergesetups", ddpMergeSetupService.findAllDdpMergeSetups());
    }
    
    String DdpAedReqDocsController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
