// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpPmService;
import com.agility.ddp.data.domain.DdpPmServiceService;
import com.agility.ddp.data.domain.DdpRulePmSvcService;
import com.agility.ddp.view.web.DdpPmServiceController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect DdpPmServiceController_Roo_Controller {
    
    @Autowired
    DdpPmServiceService DdpPmServiceController.ddpPmServiceService;
    
    @Autowired
    DdpRulePmSvcService DdpPmServiceController.ddpRulePmSvcService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String DdpPmServiceController.create(@Valid DdpPmService ddpPmService, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpPmService);
            return "ddppmservices/create";
        }
        uiModel.asMap().clear();
        ddpPmServiceService.saveDdpPmService(ddpPmService);
        return "redirect:/ddppmservices/" + encodeUrlPathSegment(ddpPmService.getPsrId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String DdpPmServiceController.createForm(Model uiModel) {
        populateEditForm(uiModel, new DdpPmService());
        return "ddppmservices/create";
    }
    
    @RequestMapping(value = "/{psrId}", produces = "text/html")
    public String DdpPmServiceController.show(@PathVariable("psrId") Integer psrId, Model uiModel) {
        uiModel.addAttribute("ddppmservice", ddpPmServiceService.findDdpPmService(psrId));
        uiModel.addAttribute("itemId", psrId);
        return "ddppmservices/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String DdpPmServiceController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddppmservices", ddpPmServiceService.findDdpPmServiceEntries(firstResult, sizeNo));
            float nrOfPages = (float) ddpPmServiceService.countAllDdpPmServices() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddppmservices", ddpPmServiceService.findAllDdpPmServices());
        }
        return "ddppmservices/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String DdpPmServiceController.update(@Valid DdpPmService ddpPmService, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpPmService);
            return "ddppmservices/update";
        }
        uiModel.asMap().clear();
        ddpPmServiceService.updateDdpPmService(ddpPmService);
        return "redirect:/ddppmservices/" + encodeUrlPathSegment(ddpPmService.getPsrId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{psrId}", params = "form", produces = "text/html")
    public String DdpPmServiceController.updateForm(@PathVariable("psrId") Integer psrId, Model uiModel) {
        populateEditForm(uiModel, ddpPmServiceService.findDdpPmService(psrId));
        return "ddppmservices/update";
    }
    
    @RequestMapping(value = "/{psrId}", method = RequestMethod.DELETE, produces = "text/html")
    public String DdpPmServiceController.delete(@PathVariable("psrId") Integer psrId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        DdpPmService ddpPmService = ddpPmServiceService.findDdpPmService(psrId);
        ddpPmServiceService.deleteDdpPmService(ddpPmService);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ddppmservices";
    }
    
    void DdpPmServiceController.populateEditForm(Model uiModel, DdpPmService ddpPmService) {
        uiModel.addAttribute("ddpPmService", ddpPmService);
        uiModel.addAttribute("ddprulepmsvcs", ddpRulePmSvcService.findAllDdpRulePmSvcs());
    }
    
    String DdpPmServiceController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
