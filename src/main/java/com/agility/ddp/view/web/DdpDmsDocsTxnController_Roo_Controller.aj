// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpCategorizedDetailService;
import com.agility.ddp.data.domain.DdpCategorizedDocsService;
import com.agility.ddp.data.domain.DdpDmsDocsDetailService;
import com.agility.ddp.data.domain.DdpDmsDocsTxn;
import com.agility.ddp.data.domain.DdpDmsDocsTxnService;
import com.agility.ddp.view.web.DdpDmsDocsTxnController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect DdpDmsDocsTxnController_Roo_Controller {
    
    @Autowired
    DdpDmsDocsTxnService DdpDmsDocsTxnController.ddpDmsDocsTxnService;
    
    @Autowired
    DdpCategorizedDetailService DdpDmsDocsTxnController.ddpCategorizedDetailService;
    
    @Autowired
    DdpCategorizedDocsService DdpDmsDocsTxnController.ddpCategorizedDocsService;
    
    @Autowired
    DdpDmsDocsDetailService DdpDmsDocsTxnController.ddpDmsDocsDetailService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String DdpDmsDocsTxnController.create(@Valid DdpDmsDocsTxn ddpDmsDocsTxn, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpDmsDocsTxn);
            return "ddpdmsdocstxns/create";
        }
        uiModel.asMap().clear();
        ddpDmsDocsTxnService.saveDdpDmsDocsTxn(ddpDmsDocsTxn);
        return "redirect:/ddpdmsdocstxns/" + encodeUrlPathSegment(ddpDmsDocsTxn.getDtxId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String DdpDmsDocsTxnController.createForm(Model uiModel) {
        populateEditForm(uiModel, new DdpDmsDocsTxn());
        return "ddpdmsdocstxns/create";
    }
    
    @RequestMapping(value = "/{dtxId}", produces = "text/html")
    public String DdpDmsDocsTxnController.show(@PathVariable("dtxId") Integer dtxId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpdmsdocstxn", ddpDmsDocsTxnService.findDdpDmsDocsTxn(dtxId));
        uiModel.addAttribute("itemId", dtxId);
        return "ddpdmsdocstxns/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String DdpDmsDocsTxnController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ddpdmsdocstxns", ddpDmsDocsTxnService.findDdpDmsDocsTxnEntries(firstResult, sizeNo));
            float nrOfPages = (float) ddpDmsDocsTxnService.countAllDdpDmsDocsTxns() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ddpdmsdocstxns", ddpDmsDocsTxnService.findAllDdpDmsDocsTxns());
        }
        addDateTimeFormatPatterns(uiModel);
        return "ddpdmsdocstxns/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String DdpDmsDocsTxnController.update(@Valid DdpDmsDocsTxn ddpDmsDocsTxn, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ddpDmsDocsTxn);
            return "ddpdmsdocstxns/update";
        }
        uiModel.asMap().clear();
        ddpDmsDocsTxnService.updateDdpDmsDocsTxn(ddpDmsDocsTxn);
        return "redirect:/ddpdmsdocstxns/" + encodeUrlPathSegment(ddpDmsDocsTxn.getDtxId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{dtxId}", params = "form", produces = "text/html")
    public String DdpDmsDocsTxnController.updateForm(@PathVariable("dtxId") Integer dtxId, Model uiModel) {
        populateEditForm(uiModel, ddpDmsDocsTxnService.findDdpDmsDocsTxn(dtxId));
        return "ddpdmsdocstxns/update";
    }
    
    @RequestMapping(value = "/{dtxId}", method = RequestMethod.DELETE, produces = "text/html")
    public String DdpDmsDocsTxnController.delete(@PathVariable("dtxId") Integer dtxId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        DdpDmsDocsTxn ddpDmsDocsTxn = ddpDmsDocsTxnService.findDdpDmsDocsTxn(dtxId);
        ddpDmsDocsTxnService.deleteDdpDmsDocsTxn(ddpDmsDocsTxn);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ddpdmsdocstxns";
    }
    
    void DdpDmsDocsTxnController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("ddpDmsDocsTxn_dtxcreateddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("ddpDmsDocsTxn_dtxmodifieddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void DdpDmsDocsTxnController.populateEditForm(Model uiModel, DdpDmsDocsTxn ddpDmsDocsTxn) {
        uiModel.addAttribute("ddpDmsDocsTxn", ddpDmsDocsTxn);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("ddpcategorizeddetails", ddpCategorizedDetailService.findAllDdpCategorizedDetails());
        uiModel.addAttribute("ddpcategorizeddocses", ddpCategorizedDocsService.findAllDdpCategorizedDocses());
        uiModel.addAttribute("ddpdmsdocsdetails", ddpDmsDocsDetailService.findAllDdpDmsDocsDetails());
    }
    
    String DdpDmsDocsTxnController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
