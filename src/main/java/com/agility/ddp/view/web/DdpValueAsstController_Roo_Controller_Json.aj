// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agility.ddp.view.web;

import com.agility.ddp.data.domain.DdpValueAsst;
import com.agility.ddp.view.web.DdpValueAsstController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect DdpValueAsstController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{vlaId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpValueAsstController.showJson(@PathVariable("vlaId") Integer vlaId) {
        DdpValueAsst ddpValueAsst = ddpValueAsstService.findDdpValueAsst(vlaId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (ddpValueAsst == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ddpValueAsst.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DdpValueAsstController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<DdpValueAsst> result = ddpValueAsstService.findAllDdpValueAssts();
        return new ResponseEntity<String>(DdpValueAsst.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpValueAsstController.createFromJson(@RequestBody String json) {
        DdpValueAsst ddpValueAsst = DdpValueAsst.fromJsonToDdpValueAsst(json);
        ddpValueAsstService.saveDdpValueAsst(ddpValueAsst);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DdpValueAsstController.createFromJsonArray(@RequestBody String json) {
        for (DdpValueAsst ddpValueAsst: DdpValueAsst.fromJsonArrayToDdpValueAssts(json)) {
            ddpValueAsstService.saveDdpValueAsst(ddpValueAsst);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{vlaId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> DdpValueAsstController.updateFromJson(@RequestBody String json, @PathVariable("vlaId") Integer vlaId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        DdpValueAsst ddpValueAsst = DdpValueAsst.fromJsonToDdpValueAsst(json);
        if (ddpValueAsstService.updateDdpValueAsst(ddpValueAsst) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{vlaId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> DdpValueAsstController.deleteFromJson(@PathVariable("vlaId") Integer vlaId) {
        DdpValueAsst ddpValueAsst = ddpValueAsstService.findDdpValueAsst(vlaId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (ddpValueAsst == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ddpValueAsstService.deleteDdpValueAsst(ddpValueAsst);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
